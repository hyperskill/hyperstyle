id,time,lang,code,raw_issues
2637248,2019-09-09 12:55:29+00:00,java8,"import java.util.Arrays;
import java.util.Scanner;

public class Main {
    private static class TableEntry<T> {
        private final int key;
        private final T value;

        public TableEntry(int key, T value) {
            this.key = key;
            this.value = value;
        }

        public int getKey() {
            return key;
        }

        public T getValue() {
            return value;
        }
    }

    private static class HashTable<T> {
        private int size;
        private TableEntry[] table;

        public HashTable(int size) {
            this.size = size;
            table = new TableEntry[size];
        }

        public boolean put(int key, T value) {
            int idx = findKey(key);

            if (idx == -1) {
                size *= 2;
                table = Arrays.copyOf(table, size);
                idx = findKey(key);
            }

            table[idx] = new TableEntry(key, value);
            return true;
        }

        public T get(int key) {
            int idx = findKey(key);

            if (idx == -1 || table[idx] == null) {
                return null;
            }

            return (T) table[idx].getValue();
        }

        public void remove(int key) {
            table[findKey(key)] = null;
        }

        private int findKey(int key) {
            int hash = key % size;

            while (!(table[hash] == null || table[hash].getKey() == key)) {
                hash = (hash + 1) % size;

                if (hash == key % size) {
                    return -1;
                }
            }

            return hash;
        }

        private void rehash() {
            size *= 2;

            TableEntry[] oldTable = table;
            table = new TableEntry[size];

            for (TableEntry tableEntry : oldTable) {
                table[findKey(tableEntry.getKey())] = tableEntry;
            }
        }

        @Override
        public String toString() {
            StringBuilder tableStringBuilder = new StringBuilder();

            for (int i = 0; i < table.length; i++) {
                if (table[i] == null) {
                    tableStringBuilder.append(i + "": null"");
                } else {
                    tableStringBuilder.append(i + "": key="" + table[i].getKey()
                            + "", value="" + table[i].getValue());
                }

                if (i < table.length - 1) {
                    tableStringBuilder.append(""\n"");
                }
            }

            return tableStringBuilder.toString();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int counter = scanner.nextInt();

        HashTable<String> data = new HashTable<>(counter);
        while (counter != 0) {
            String command = scanner.next();
            switch (command) {
                case ""put"":
                    data.put(scanner.nextInt(), scanner.next());
                    break;
                case ""get"":
                    String  val = data.get(scanner.nextInt());
                    System.out.println(val == null ? - 1: val);
                    break;
                case ""remove"":
                    data.remove(scanner.nextInt());
                    break;
            }
            counter--;
        }
    }
}
","[{""origin_class"": ""CyclomaticComplexityCheck"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 9, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 1}, {""origin_class"": ""JavaNCSSCheck"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 9, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 3}, {""origin_class"": ""CyclomaticComplexityCheck"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 14, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 1}, {""origin_class"": ""JavaNCSSCheck"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 14, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 2}, {""origin_class"": ""CyclomaticComplexityCheck"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 18, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 1}, {""origin_class"": ""JavaNCSSCheck"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 18, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 2}, {""origin_class"": ""CyclomaticComplexityCheck"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 27, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 1}, {""origin_class"": ""JavaNCSSCheck"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 27, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 3}, {""origin_class"": ""CyclomaticComplexityCheck"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 32, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 2}, {""origin_class"": ""JavaNCSSCheck"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 32, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 8}, {""origin_class"": ""CyclomaticComplexityCheck"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 45, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 3}, {""origin_class"": ""JavaNCSSCheck"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 45, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 5}, {""origin_class"": ""BooleanExpressionComplexityCheck"", ""type"": ""BOOL_EXPR_LEN"", ""description"": ""Too long boolean expression. Try to split it into smaller expressions."", ""file_path"": """", ""line_no"": 48, ""column_no"": 13, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 1}, {""origin_class"": ""CyclomaticComplexityCheck"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 55, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 1}, {""origin_class"": ""JavaNCSSCheck"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 55, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 2}, {""origin_class"": ""CyclomaticComplexityCheck"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 59, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 4}, {""origin_class"": ""JavaNCSSCheck"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 59, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 7}, {""origin_class"": ""BooleanExpressionComplexityCheck"", ""type"": ""BOOL_EXPR_LEN"", ""description"": ""Too long boolean expression. Try to split it into smaller expressions."", ""file_path"": """", ""line_no"": 62, ""column_no"": 13, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 1}, {""origin_class"": ""JavaNCSSCheck"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 73, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 6}, {""origin_class"": ""CyclomaticComplexityCheck"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 73, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 2}, {""origin_class"": ""UnusedPrivateMethod"", ""type"": ""BEST_PRACTICES"", ""description"": ""Avoid unused private methods such as 'rehash()'."", ""file_path"": """", ""line_no"": 73, ""column_no"": 1, ""inspector_type"": ""PMD""}, {""origin_class"": ""CyclomaticComplexityCheck"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 84, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 4}, {""origin_class"": ""JavaNCSSCheck"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 84, ""column_no"": 9, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 10}, {""origin_class"": ""CyclomaticComplexityCheck"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 105, ""column_no"": 5, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 4}, {""origin_class"": ""JavaNCSSCheck"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 105, ""column_no"": 5, ""inspector_type"": ""CHECKSTYLE"", ""measure"": 18}, {""origin_class"": ""MissingSwitchDefaultCheck"", ""type"": ""ERROR_PRONE"", ""description"": ""switch without \""default\"" clause."", ""file_path"": """", ""line_no"": 112, ""column_no"": 13, ""inspector_type"": ""CHECKSTYLE""}, {""origin_class"": ""NoWhitespaceAfterCheck"", ""type"": ""CODE_STYLE"", ""description"": ""'-' is followed by whitespace."", ""file_path"": """", ""line_no"": 118, ""column_no"": 54, ""inspector_type"": ""CHECKSTYLE""}, {""origin_class"": ""WhitespaceAroundCheck"", ""type"": ""CODE_STYLE"", ""description"": ""':' is not preceded with whitespace."", ""file_path"": """", ""line_no"": 118, ""column_no"": 57, ""inspector_type"": ""CHECKSTYLE""}, {""origin_class"": ""InefficientStringBuffering"", ""type"": ""BEST_PRACTICES"", ""description"": ""Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append()."", ""file_path"": """", ""line_no"": 90, ""column_no"": 1, ""inspector_type"": ""PMD""}, {""origin_class"": ""InefficientStringBuffering"", ""type"": ""BEST_PRACTICES"", ""description"": ""Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append()."", ""file_path"": """", ""line_no"": 92, ""column_no"": 1, ""inspector_type"": ""PMD""}]"
2760103,2019-09-16 16:38:07+00:00,kotlin,"import java.util.*;

fun main(args: Array<String>) {
    val scanner = Scanner(System.`in`)
    // put your code here
    val sq = scanner.nextDouble()
    val sqrt = Math.sqrt(Math.sqrt(sq))
    println(sqrt)
}
","[{""origin_class"": ""LongMethod"", ""type"": ""FUNC_LEN"", ""description"": ""Too long function. Try to split it into smaller functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 3, ""column_no"": 5, ""inspector_type"": ""DETEKT"", ""measure"": 6}, {""origin_class"": ""ComplexMethod"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 3, ""column_no"": 5, ""inspector_type"": ""DETEKT"", ""measure"": 1}, {""origin_class"": ""NoSemicolons"", ""type"": ""CODE_STYLE"", ""description"": ""Unnecessary semicolon"", ""file_path"": """", ""line_no"": 1, ""column_no"": 19, ""inspector_type"": ""DETEKT""}]"
2760563,2019-09-16 17:01:13+00:00,python3,"text = input()
words = text.split()
for word in words:
    # finish the code here
    if word.startswith(""WWW.""):
        print(word)
    elif word.startswith(""www.""):
        print(word)
    elif word.startswith(""https://""):
        print(word)
    elif word.startswith(""HTTPS://""):
        print(word)
    elif word.startswith(""http://""):
        print(word)
    elif word.startswith(""HTTP://""):
        print(word)
    else:
        continue
","[{""origin_class"": ""C901"", ""type"": ""CYCLOMATIC_COMPLEXITY"", ""description"": ""Too complex function. You can figure out how to simplify this code or split it into a set of small functions / methods. It will make your code easy to understand and less error prone."", ""file_path"": """", ""line_no"": 3, ""column_no"": 1, ""inspector_type"": ""FLAKE8"", ""measure"": 8}, {""origin_class"": ""WPS327"", ""type"": ""BEST_PRACTICES"", ""description"": ""Found useless `continue` at the end of the loop"", ""file_path"": """", ""line_no"": 3, ""column_no"": 1, ""inspector_type"": ""FLAKE8""}, {""origin_class"": ""WPS223"", ""type"": ""COMPLEXITY"", ""description"": ""Found too many `elif` branches: 5 > 3"", ""file_path"": """", ""line_no"": 5, ""column_no"": 5, ""inspector_type"": ""FLAKE8""}]"
